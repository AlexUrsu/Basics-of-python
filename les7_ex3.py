# Занятие 7. упражнение 3
# Реализовать программу работы с органическими клетками, состоящими из ячеек.

print('Добро пожаловать в программу работы с органическими клетками, состоящими из ячеек.')

# Необходимо создать класс Клетка.

class Cell(object):
    # В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
    def __init__(self, alveola):
        self.alveola = alveola

    # В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
    # Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

    # Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self, other):
        return Cell(self.alveola+other.alveola)

    # Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
    def __sub__(self, other):
        if self.alveola > other.alveola:
            return Cell(self.alveola - other.alveola)
        else:
            print('Вычесть корректно не получилось, увы :(')
            return Cell(abs(self.alveola - other.alveola))
            # raise OverflowError # Вместо возврата по результата по модулю как вариант можно вызывать ошибку, но это останвливает работу программы


    # Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
    def __mul__(self, other):
        return Cell(self.alveola * other.alveola)

    # Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    def __truediv__(self, other):
        return Cell(self.alveola // other.alveola)

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
    def make_order(self, alveol_row):  # вариант когда принимающий экземпляр класса собсвенный (что логично)
        s = ''
        n = 1
        for i in range(self.alveola):
            n += 1
            if n > alveol_row:
                n = 1
                s = s+'*\n'
            else:
                s = s + '*'
        return s

    def make_order2(self, cell, alveol_row):
        s = ''
        n = 1
        for i in range(cell.alveola):  # вариант когда принимающий экземпляр класса внешний (что вроде не совсем корректно)
            n += 1
            if n > alveol_row:
                n = 1
                s = s+'*\n'
            else:
                s = s + '*'
        return s

# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.

c1 = Cell(16)
c2 = Cell(10)
c3 = c1+c2

print(c3.alveola)
print(c1.alveola)
print(c2.alveola)

c3 = c1/c2
print(c3.alveola)
c3 = c1-c2
print(c3.alveola)
c3 = c2-c1
print(c3.alveola)
c3 = c1*c2
print(c3.alveola)

print(c1.make_order(6))
print(c1.make_order2(c1, 6))

